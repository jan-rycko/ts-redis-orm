import { BaseEntity } from "./BaseEntity";
import { IAggregateObject, IArgvColumn, IIdType, IIndexOperator, IOrder, IPerformanceResult, IStringOperator, IUniqueValueType, IValueType } from "./types";
export declare class Query<T extends typeof BaseEntity> {
    private readonly _entityType;
    private _table;
    private _tableName;
    private _offset;
    private _limit;
    private _whereSearches;
    private _whereIndexes;
    private _sortBy;
    private _skipTrackingId;
    constructor(_entityType: T);
    setTable(table: string): this;
    find(id: IIdType): Promise<[InstanceType<T> | undefined, IPerformanceResult]>;
    findMany(ids: IIdType[]): Promise<[Array<InstanceType<T>>, IPerformanceResult]>;
    findUnique(column: IArgvColumn<T>, value: IUniqueValueType): Promise<[InstanceType<T> | undefined, IPerformanceResult]>;
    findUniqueMany(column: IArgvColumn<T>, values: IUniqueValueType[]): Promise<[Array<InstanceType<T>>, IPerformanceResult]>;
    runOnce(): Promise<[InstanceType<T> | undefined, IPerformanceResult]>;
    run(): Promise<[Array<InstanceType<T>>, IPerformanceResult]>;
    where(column: IArgvColumn<T>, operator: IStringOperator | IIndexOperator, value: IValueType): this;
    sortBy(column: IArgvColumn<T>, order: IOrder): this;
    offset(value: number): this;
    limit(value: number): this;
    take(value: number): this;
    count(): Promise<[number, IPerformanceResult]>;
    count(groupBy: string): Promise<[IAggregateObject, IPerformanceResult]>;
    min(column: IArgvColumn<T>): Promise<[number, IPerformanceResult]>;
    min(column: IArgvColumn<T>, groupBy: string): Promise<[IAggregateObject, IPerformanceResult]>;
    max(column: IArgvColumn<T>): Promise<[number, IPerformanceResult]>;
    max(column: IArgvColumn<T>, groupBy: string): Promise<[IAggregateObject, IPerformanceResult]>;
    sum(column: IArgvColumn<T>): Promise<[number, IPerformanceResult]>;
    sum(column: IArgvColumn<T>, groupBy: string): Promise<[IAggregateObject, IPerformanceResult]>;
    avg(column: IArgvColumn<T>): Promise<[number, IPerformanceResult]>;
    avg(column: IArgvColumn<T>, groupBy: string): Promise<[IAggregateObject, IPerformanceResult]>;
    rank(column: IArgvColumn<T>, id: IIdType, isReverse?: boolean): Promise<[number, IPerformanceResult]>;
    private _run;
    private _runSimple;
    private _aggregate;
    private _aggregateSimple;
    private _getRedis;
    private _skipTracking;
    private _resumeTracking;
}
